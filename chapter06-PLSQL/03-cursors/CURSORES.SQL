-- Adrián Navarro Gabino

-- EJERCICIO 1

-- Realiza un cursor sobre la tabla Bancos y sucursales,
-- donde indiques el nombre del banco y el de cada
-- sucursal. Hazlo con loop simple, while y con FOR.

DECLARE
    CURSOR C_SUCURSALES IS
    SELECT NOMBRE_BANC, NOMBRE_SUC
    FROM BANCOS, SUCURSALES
    WHERE BANCOS.COD_BANCO = SUCURSALES.COD_BANCO;

    REG_SUCURSALES C_SUCURSALES%ROWTYPE;
BEGIN
    OPEN C_SUCURSALES;
    LOOP
        FETCH C_SUCURSALES INTO REG_SUCURSALES;
        EXIT WHEN C_SUCURSALES%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(REG_SUCURSALES.NOMBRE_BANC||' - '||REG_SUCURSALES.NOMBRE_SUC);
    END LOOP;
    CLOSE C_SUCURSALES;

    OPEN C_SUCURSALES;
    FETCH C_SUCURSALES INTO REG_SUCURSALES;
    WHILE C_SUCURSALES%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(REG_SUCURSALES.NOMBRE_BANC||' - '||REG_SUCURSALES.NOMBRE_SUC);
        FETCH C_SUCURSALES INTO REG_SUCURSALES;
    END LOOP;
    CLOSE C_SUCURSALES;

    FOR R_SUCURSALES IN C_SUCURSALES LOOP
        DBMS_OUTPUT.PUT_LINE(R_SUCURSALES.NOMBRE_BANC||' - '||R_SUCURSALES.NOMBRE_SUC);
    END LOOP;
END;

-- EJERCICIO 2

-- Crea un campo en la tabla Cuenta, llamándolo
-- “Rentable”, recorre la tabla Cuenta y si el haber es
-- mayor que el debe actualizar a S de los contrario a N,
-- sumando las rentables y las no rentables y sacándolas
-- por pantalla al final. Usa ROWID para hacerlo
-- (identificador único para cada registros de una BD).

ALTER TABLE CUENTAS ADD
(
    RENTABLE VARCHAR2(1)
);

DECLARE
    CURSOR C_RENTABLE IS
    SELECT ROWID, SALDO_DEBE, SALDO_HABER, RENTABLE
    FROM CUENTAS;
    
    RENTABLES NUMBER := 0;
    
    NO_RENTABLES NUMBER := 0;
BEGIN
    FOR R_RENTABLE IN C_RENTABLE LOOP
        UPDATE CUENTAS
        SET RENTABLE = 'S'
        WHERE ROWID = R_RENTABLE.ROWID AND SALDO_DEBE < SALDO_HABER;
        
        UPDATE CUENTAS
        SET RENTABLE = 'N'
        WHERE ROWID = R_RENTABLE.ROWID AND SALDO_DEBE >= SALDO_HABER;
        
        IF R_RENTABLE.RENTABLE = 'S' THEN
            RENTABLES := RENTABLES + 1;
        ELSE
            NO_RENTABLES := NO_RENTABLES + 1;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('RENTABLES: '||RENTABLES);
    DBMS_OUTPUT.PUT_LINE('NO RENTABLES: '||NO_RENTABLES);
END;

-- EJERCICIO 3

-- Mira de realizar lo anterior con una UPDATE
-- Masiva (1 sola update).

DECLARE
    CURSOR C_RENTABLE IS
    SELECT ROWID, SALDO_DEBE, SALDO_HABER, RENTABLE
    FROM CUENTAS;
    
    RENTABLES NUMBER := 0;
    
    NO_RENTABLES NUMBER := 0;
BEGIN
    FOR R_RENTABLE IN C_RENTABLE LOOP
        UPDATE CUENTAS
        SET RENTABLE = (CASE WHEN SALDO_DEBE < SALDO_HABER THEN 'S' ELSE 'N' END)
        WHERE ROWID = R_RENTABLE.ROWID;
        
        IF R_RENTABLE.RENTABLE = 'S' THEN
            RENTABLES := RENTABLES + 1;
        ELSE
            NO_RENTABLES := NO_RENTABLES + 1;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('RENTABLES: '||RENTABLES);
    DBMS_OUTPUT.PUT_LINE('NO RENTABLES: '||NO_RENTABLES);
END;

-- EJERCICIO 4

-- Utiliza un cursor y un bucle LOOP simple para
-- recuperar y mostrar los datos de todos Los productos.
-- Indica al final cuantos productos hay.

DECLARE
    CURSOR C_PRODUCTOS IS
    SELECT *
    FROM PRODUCTOS;
    
    REG_PRODUCTOS C_PRODUCTOS%ROWTYPE;
    NUMERO_PRODUCTOS NUMBER := 0;
BEGIN
    OPEN C_PRODUCTOS;
    LOOP
        FETCH C_PRODUCTOS INTO REG_PRODUCTOS;
        EXIT WHEN C_PRODUCTOS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(REG_PRODUCTOS.CODIGO||' - '||REG_PRODUCTOS.DESCRIPCION||' - '||REG_PRODUCTOS.PRECIO);
        NUMERO_PRODUCTOS := NUMERO_PRODUCTOS + 1;
    END LOOP;
    CLOSE C_PRODUCTOS;
    
    DBMS_OUTPUT.PUT_LINE('NUMERO DE PRODUCTOS: '||NUMERO_PRODUCTOS);
END;

-- EJERCICIO 5

-- Usa el cursor directamente en el bucle.

DECLARE
    REG_PRODUCTOS C_PRODUCTOS%ROWTYPE;
    NUMERO_PRODUCTOS NUMBER := 0;
BEGIN
    FOR REG_PRODUCTOS IN (SELECT * FROM PRODUCTOS) LOOP
        DBMS_OUTPUT.PUT_LINE(REG_PRODUCTOS.CODIGO||' - '||REG_PRODUCTOS.DESCRIPCION||' - '||REG_PRODUCTOS.PRECIO);
        NUMERO_PRODUCTOS := NUMERO_PRODUCTOS + 1;
    END LOOP;
END;


-- EJERCICIO 6

-- Usa ahora un while

DECLARE
    CURSOR C_PRODUCTOS IS
    SELECT *
    FROM PRODUCTOS;
    
    REG_PRODUCTOS C_PRODUCTOS%ROWTYPE;
    NUMERO_PRODUCTOS NUMBER := 0;
BEGIN
    OPEN C_PRODUCTOS;
    FETCH C_PRODUCTOS INTO REG_PRODUCTOS;
    WHILE C_PRODUCTOS%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(REG_PRODUCTOS.CODIGO||' - '||REG_PRODUCTOS.DESCRIPCION||' - '||REG_PRODUCTOS.PRECIO);
        NUMERO_PRODUCTOS := NUMERO_PRODUCTOS + 1;
        FETCH C_PRODUCTOS INTO REG_PRODUCTOS;
    END LOOP;
    CLOSE C_PRODUCTOS;
    
    DBMS_OUTPUT.PUT_LINE('NUMERO DE PRODUCTOS: '||NUMERO_PRODUCTOS);
END;

-- EJERCICIO 7

DECLARE
    CURSOR C_ALUMNOSINF IS
    SELECT numMatricula AS MATR, nombre||' '||apellidos AS NOM, precioMatricula AS PRECIO
    FROM Alumnos
    WHERE titulacion = 'Informatica';
BEGIN
    FOR R_ALUMNOSINF IN C_ALUMNOSINF LOOP
        DBMS_OUTPUT.PUT_LINE(R_ALUMNOSINF.NOM);
        INSERT INTO AlumnosInf
        (IDMatricula, nombre_apellidos, precio)
        VALUES
        (R_ALUMNOSINF.MATR, R_ALUMNOSINF.NOM, R_ALUMNOSINF.PRECIO);
    END LOOP;
END;

-- EJERCICIO 8

-- APARTADO A

DECLARE
    CURSOR C_PRESUPUESTO IS
    SELECT ROWID, DECODE(Nombre_Depart, 'Gerente', 1.2 * Presupuesto, 'Comercial',
        1.15 * Presupuesto, 1.1 *Presupuesto) AS NUEVO_PRESUPUESTO
    FROM Tabla_Departamento;
BEGIN
    FOR R_PRESUPUESTO IN C_PRESUPUESTO LOOP
        UPDATE Tabla_Departamento
        SET Presupuesto = R_PRESUPUESTO.NUEVO_PRESUPUESTO
        WHERE ROWID = R_PRESUPUESTO.ROWID;
    END LOOP;
END;

-- APARTADO B

DECLARE
    CURSOR C1 IS
    SELECT Num_Depart
    FROM Tabla_Departamento;
    
    CURSOR C2 IS
    SELECT Num_Empleado, Num_Depart, Salario
    FROM Tabla_Empleado;
    
    NUMERO_EMP NUMBER;
BEGIN
    UPDATE Tabla_Departamento
    SET Media_Salarios = 0,
        Total_Salarios = 0;
    
    FOR R_DEP IN C1 LOOP
        SELECT COUNT(*) INTO NUMERO_EMP
        FROM C2
        WHERE Num_Depart = R_DEP.Num_Depart;
        
        FOR R_EMP IN C2 LOOP
            UPDATE Tabla_Departamento
            SET Total_Salarios = Total_Salarios + R_EMP.Salario
            WHERE R_EMP.Num_Depart = Num_Depart;
        END LOOP;
        
        UPDATE Tabla_Departamento
        SET Media_Salario = Total_Salarios / NUMERO_EMP
        WHERE Num_Depart = R_DEP.Num_Depart;
    END LOOP;
END;

-- EJERCICIO 9

CREATE TABLE NOTAS
(
    MATRICULA_ALU VARCHAR2(10) NOT NULL,
    CONVOCATORIA VARCHAR2(10) NOT NULL,
    CALIFICACION NUMBER(3,2),
    CONSTRAINT PK_NOTAS PRIMARY KEY (MATRICULA_ALU, CONVOCATORIA),
    CONSTRAINT FK_NOTAS_ALUMNOS FOREIGN KEY (MATRICULA_ALU) REFERENCES
    ALUMNOS (numMatricula)
);

DECLARE
    CURSOR C_ALUMNOS IS
    SELECT numMatricula
    FROM ALUMNOS;
BEGIN
    FOR R_ALUMNOS IN C_ALUMNOS LOOP
        IF R_ALUMNOS.numMatricula NOT IN (SELECT MATRICULA_ALU FROM NOTAS) THEN
            FOR I IN 1..3 LOOP
                INSERT INTO NOTAS
                (MATRICULA_ALU, CONVOCATORIA)
                VALUES
                (R_ALUMNOS.numMatricula, 'ORD'||I);
            END LOOP;
            
            INSERT INTO NOTAS
            (MATRICULA_ALU, CONVOCATORIA)
            VALUES
            (R_ALUMNOS.numMatricula, 'JUNIO');
        END IF;
    END LOOP;
END;

-- EJERCICIO 10

CREATE TABLE AUX_ARTICULOS
(
    CODIGO VARCHAR2(10) NOT NULL,
    NOMBRE VARCHAR2(20),
    PRECIO NUMBER,
    CONSTRAINT PK_AUX_PRODUCTOS PRIMARY KEY (CODIGO)
);

DECLARE
    CURSOR C_ARTICULOS IS
    SELECT *
    FROM ARTICULOS
    ORDER BY PRECIO DESC;
    
    NUMBER_OF_PRODUCTS NUMBER;
BEGIN
    NUMBER_OF_PRODUCTS := &ENTER_NUMBER_OF_PRODUCTS;
    
    FOR I IN 1..NUMBER_OF_PRODUCTS LOOP
        INSERT INTO AUX_ARTICULOS
        (CODIGO, NOMBRE, PRECIO)
        VALUES
        (C_ARTICULOS.CODIGO, C_ARTICULOS.NOMBRE, C_ARTICULOS.PRECIO);
    END LOOP;
END;

-- EJERCICIO 11

CREATE TABLE TABLA_PROVEEDORES
(
    NOMBRE VARCHAR2(20) NOT NULL,
    PAIS VARCHAR2(20),
    CONSTRAINT PK_PROVEEDORES PRIMARY KEY (NOMBRE)
);

CREATE TABLE TABLA_AUX
(
    NOMBRE_AUX VARCHAR2(20) NOT NULL,
    PAIS_AUX VARCHAR2(20),
    CONSTRAINT PK_AUX PRIMARY KEY (NOMBRE_AUX)
);

DECLARE
    CURSOR C_PAIS IS
    SELECT DISTINCT PAIS
    FROM TABLA_PROVEEDORES;
BEGIN
    FOR R_PAIS IN C_PAIS LOOP
        INSERT INTO TABLA_AUX
        (NOMBRE_AUX, PAIS_AUX)
        (SELECT NOMBRE, R_PAIS.PAIS
        FROM TABLA_PROVEEDORES
        WHERE PAIS = R_PAIS.PAIS);
    END LOOP;
END;

-- EJERCICIO 12

DECLARE
    CURSOR C_AERO IS
    SELECT AERO1.NOMBRE DESP, DIR1.NOMBRE DIR_DESP, AERO2.NOMBRE ATERR, DIR2.NOMBRE DIR_ATERR, VO.NUM_VUELO
    FROM AEROPUERTOS AERO1, DIRECTOR DIR1, AEROPUERTOS AERO2, DIRECTOR DIR2,
    VOLAR VO, PROGRAMA_VUELO PROG
    WHERE VO.NUM_VUELO = PROG.NUM_VUELO
      AND PROG.COD_AERO_DESPEGAR = AERO1.CODIGO
      AND PROG.COD_AERO_ATERRIZAR = AERO2.CODIGO
      AND AERO1.CODIGO = DIR1.COD_AEROPUERTO
      AND AERO2.CODIGO = DIR2.COD_AEROPUERTO;
    
    FRECUENCIA NUMBER;
BEGIN
    FOR R_AERO IN C_AERO LOOP
        SELECT COUNT(NUM_VUELO) INTO FRECUENCIA
        FROM VOLAR
        WHERE TO_CHAR(FECHA_VUELO, 'YYYY') = 2014
          AND NUM_VUELO = R_AERO.NUM_VUELO;
        
        DBMS_OUTPUT.PUT_LINE('AERO1: '||R_AERO.DESP||' DIR1: '||R_AERO.DIR_DESP||
        ' AERO2: '||R_AERO.ATERR||' DIR2: '||R_AERO.DIR_ATERR||' NUM VUELOS: '||FRECUENCIA);
    END LOOP;
END;
    
    